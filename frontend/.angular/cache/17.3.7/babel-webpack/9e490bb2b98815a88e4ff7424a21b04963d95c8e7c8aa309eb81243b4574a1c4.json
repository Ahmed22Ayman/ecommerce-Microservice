{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = 'http://localhost:8080/api'; // API Gateway URL\n      this.currentUserSubject = new BehaviorSubject(null);\n      this.currentUser$ = this.currentUserSubject.asObservable();\n      // Check for existing token on service initialization\n      const token = localStorage.getItem('jwt_token');\n      if (token) {\n        // TODO: Validate token and get user info\n      }\n    }\n    getAuthHeaders() {\n      const token = localStorage.getItem('jwt_token');\n      return new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': token ? `Bearer ${token}` : ''\n      });\n    }\n    // Auth Service methods\n    login(email, password) {\n      return this.http.post(`${this.baseUrl}/auth/login`, {\n        email,\n        password\n      });\n    }\n    register(userData) {\n      return this.http.post(`${this.baseUrl}/auth/register`, userData);\n    }\n    logout() {\n      localStorage.removeItem('jwt_token');\n      this.currentUserSubject.next(null);\n    }\n    setCurrentUser(user, token) {\n      localStorage.setItem('jwt_token', token);\n      this.currentUserSubject.next(user);\n    }\n    // Product Service methods\n    getProducts() {\n      return this.http.get(`${this.baseUrl}/products`);\n    }\n    getProduct(id) {\n      return this.http.get(`${this.baseUrl}/products/${id}`);\n    }\n    searchProducts(query) {\n      return this.http.get(`${this.baseUrl}/products/search?q=${query}`);\n    }\n    getProductsByCategory(category) {\n      return this.http.get(`${this.baseUrl}/products/category/${category}`);\n    }\n    // Cart Service methods\n    getCart() {\n      return this.http.get(`${this.baseUrl}/cart`, {\n        headers: this.getAuthHeaders()\n      });\n    }\n    addToCart(productId, quantity) {\n      return this.http.post(`${this.baseUrl}/cart`, {\n        productId,\n        quantity\n      }, {\n        headers: this.getAuthHeaders()\n      });\n    }\n    updateCartItem(itemId, quantity) {\n      return this.http.put(`${this.baseUrl}/cart/${itemId}`, {\n        quantity\n      }, {\n        headers: this.getAuthHeaders()\n      });\n    }\n    removeFromCart(itemId) {\n      return this.http.delete(`${this.baseUrl}/cart/${itemId}`, {\n        headers: this.getAuthHeaders()\n      });\n    }\n    clearCart() {\n      return this.http.delete(`${this.baseUrl}/cart`, {\n        headers: this.getAuthHeaders()\n      });\n    }\n    // Wishlist methods (assuming part of cart service)\n    getWishlist() {\n      return this.http.get(`${this.baseUrl}/wishlist`, {\n        headers: this.getAuthHeaders()\n      });\n    }\n    addToWishlist(productId) {\n      return this.http.post(`${this.baseUrl}/wishlist`, {\n        productId\n      }, {\n        headers: this.getAuthHeaders()\n      });\n    }\n    removeFromWishlist(productId) {\n      return this.http.delete(`${this.baseUrl}/wishlist/${productId}`, {\n        headers: this.getAuthHeaders()\n      });\n    }\n    // Order Service methods\n    getOrders() {\n      return this.http.get(`${this.baseUrl}/orders`, {\n        headers: this.getAuthHeaders()\n      });\n    }\n    getOrder(id) {\n      return this.http.get(`${this.baseUrl}/orders/${id}`, {\n        headers: this.getAuthHeaders()\n      });\n    }\n    createOrder(orderData) {\n      return this.http.post(`${this.baseUrl}/orders`, orderData, {\n        headers: this.getAuthHeaders()\n      });\n    }\n    // Payment Service methods\n    processPayment(paymentData) {\n      return this.http.post(`${this.baseUrl}/payments`, paymentData, {\n        headers: this.getAuthHeaders()\n      });\n    }\n    getPaymentStatus(paymentId) {\n      return this.http.get(`${this.baseUrl}/payments/${paymentId}`, {\n        headers: this.getAuthHeaders()\n      });\n    }\n    static {\n      this.ɵfac = function ApiService_Factory(t) {\n        return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: ApiService,\n        factory: ApiService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}